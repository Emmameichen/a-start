import json
import random
from scipy.cluster.hierarchy import dendrogram, linkage
import matplotlib.pyplot as plt
import scipy.spatial.distance as distance
import numpy as np
from sklearn.preprocessing import MinMaxScaler

f = open('titanic.json', 'r')
d = json.load(f)

# create array of zeros, 12 across, 891 lines
dArray = [[0 for x in range(0, 6)] for y in range(0, len(d))]
# replace zeros with features from json file
for i in range(0, len(d)):
    if d[i]['Age'] == '':
        dArray[i][0] = None
    else:
        dArray[i][0] = float(d[i]['Age'])
    dArray[i][1] = float(d[i]['Fare'])

    dArray[i][2] = float(d[i]['SiblingsAndSpouses']) + float(d[i]['ParentsAndChildren'])

    if d[i]['Embarked'] == 'C':
        dArray[i][3] = 1.
    elif d[i]['Embarked'] == 'Q':
        dArray[i][3] = 2.
    elif d[i]['Embarked'] == 'S':
        dArray[i][3] = 3.
    elif not d[i]['Embarked']:
        dArray[i][3] = None
    
    if d[i]['Sex'] == 'male':
        dArray[i][4] = 0
    elif d[i]['Sex'] == 'female':
        dArray[i][4] = 1
    elif not d[i]['Sex']:
        dArray[i][4] = None
    
    # add the target
    dArray[i][5] = float(d[i]['Survived'])

#remove the missing values
missing = []
dataNoMiss = []
for row in dArray:
    if None in row:
        missing.append(row)
    else:
        dataNoMiss.append(row)
dataNoMiss = np.array(dataNoMiss)

# normalize data
scaler = MinMaxScaler(feature_range=(0,1))
dataNoMiss = scaler.fit_transform(dataNoMiss)


Z = linkage(dataNoMiss[:, 0:5], method='ward', metric='euclidean') # distance between clusters and metric
dendrogram(Z, leaf_rotation=90.,leaf_font_size=3.)
plt.title('Hierarchical Clustering Dendrogram')
plt.xlabel('Instance Index')
plt.ylabel('Distance')
plt.axhline(y=9, color='black')# visually, 9 seems like a good threshold and we have 3 clusters now
plt.show()




#calculate cluster mean
def clusterMean(cluster):
    sumAge = 0
    sumFare = 0
    sumCompanions = 0
    sumEmbarked = 0
    sumSex = 0
    for instance in cluster:
        sumAge += instance[0]
        sumFare += instance[1]
        sumCompanions += instance[2]
        sumEmbarked += instance[3]
        sumSex += instance[4]
    sums = [sumAge, sumFare, sumCompanions, sumEmbarked, sumSex]
    mean = [float(Sum)/len(cluster) for Sum in sums]
    return mean


# assign centroids randomly in feature space
centroids1 = [random.uniform(0, 1) for number in xrange(5)]
centroids2 = [random.uniform(0, 1) for number in xrange(5)]
centroids3 = [random.uniform(0, 1) for number in xrange(5)]

centroids = [centroids1, centroids2, centroids3]

i = 0
j = 0
oldCluster1 = []
oldCluster2 = []
oldCluster3 = []
while j <10 and i < 1: # repeat until cluster assignment stops changing
    cluster1 = []
    cluster2 = []
    cluster3 = []
    # assign each instance to cluster with closest centroid
    for instance in dataNoMiss:
        d1 = distance.euclidean(instance[0:5], centroids1)
        d2 = distance.euclidean(instance[0:5], centroids2)
        d3 = distance.euclidean(instance[0:5], centroids3)
        if min(d1, d2, d3) == d1:
            cluster1.append(instance)
        elif min(d1, d2, d3) == d2:
            cluster2.append(instance)
        elif min(d1, d2, d3) == d3:
            cluster3.append(instance)

    cluster1 = np.array(cluster1)
    cluster2 = np.array(cluster2)
    cluster3 = np.array(cluster3)

    if np.array_equal(cluster1, oldCluster1) and np.array_equal(cluster2, oldCluster2): # do i need to change this back for lists?
        i = 1

    #recompute cluster centroid
    centroids1 = clusterMean(cluster1)
    centroids2 = clusterMean(cluster2)
    centroids3 = clusterMean(cluster3)


    oldCluster1 = cluster1[:]
    oldCluster2 = cluster2[:]
    oldCluster3 = cluster3[:]

    featureNames = ['age','fare','companions_count', 'embarked_location', 'sex', 'survived']


    if j is 0 or j is 5 or j is 10 or i is 1:
        k = 3
        for p in range(0, 5):
            for q in range(0, 5):
                if p < q:
                    plt.plot(cluster1[:, p], cluster1[:, q], 'gx')
                    plt.plot(cluster2[:, p], cluster2[:, q], 'bx')
                    plt.plot(cluster3[:, p], cluster3[:, q], 'kx')
                    plt.plot(centroids1[p], centroids1[q], 'go', label='centroid 1')
                    plt.plot(centroids2[p], centroids2[q], 'go', label='centroid 2', color='blue')
                    plt.plot(centroids3[p], centroids3[q], 'go', label='centroid 3', color='black')
                    plt.title(featureNames[p] + ' vs. ' + featureNames[q])
                    plt.xlabel(featureNames[p])
                    plt.ylabel(featureNames[q])
                    plt.legend()
                    plt.savefig('%s_vs_%s_%i.png' % (featureNames[p], featureNames[q], j))
                    plt.clf()
    j += 1


#check the proportion of survived in each cluster
countTarget1 = 0
countTarget2 = 0
countTarget3 = 0

for instance in cluster1:
    if instance[5] == 1:
        countTarget1 += 1
for instance in cluster2:
    if instance[5] == 1:
        countTarget2 += 1
for instance in cluster3:
    if instance[5] == 1:
        countTarget3 += 1

print str((countTarget1/float(len(cluster1))*100)) + '% survived in cluster 1'
print str((countTarget2/float(len(cluster2))*100)) + '% survived in cluster 2'
print str((countTarget3/float(len(cluster3))*100)) + '% survived in cluster 3'
